webpackJsonp([4],{662:function(e,n,t){var s=t(71)(t(694),t(783),null,null);e.exports=s.exports},679:function(e,n,t){var s=t(71)(null,t(684),null,null);e.exports=s.exports},680:function(e,n,t){var s=t(71)(null,t(683),null,null);e.exports=s.exports},681:function(e,n,t){var s=t(71)(null,t(682),null,null);e.exports=s.exports},682:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("section",[t("h1",[e._v("Введение.")]),t("p",[e._v("\n        Gmail API является RESTful API, которое можно использовать для доступа к почтовым сообщениям пользователя\n        и отправлять электронные сообщения. Для большинства веб приложений (включая мобильные приложения),\n        Gmail API является лучшим выбором для авторизованного доступа к пользовательским данным Gmail.")]),t("p",[e._v("\n        Gmail API дает вам гибкий RESTful доступ к пользовательскому почтовому ящику с естественным\n        интерфейсом к "),t("code",[e._v("Threads, Messages, Labels, Drafts, History, и Settings")]),e._v(". Этот интерфейс реализован\n        на многих современных языках программирования. Ваше приложение может использовать это API, чтобы\n        опеспечить следущие возможности Gmail:\n    ")]),t("ul",[t("li",[e._v("Читать сообщения с Gmail;")]),t("li",[e._v("Передавать email сообщения;")]),t("li",[e._v("Поиск соответствующих сообщений;")]),t("li",[e._v("\n            Создавать фильтры для автоматической маркировки, пересылки или архивирования сообщений.\n        ")])]),t("br"),t("p",[e._v("\n        Все что вам необходимо чтобы использовать Gmail API - это выбрать\n        "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/downloads",target:"_blank"}},[e._v("клиенскую библиотеку")]),e._v("\n        для вашего языка программирования и ваше приложение должно уметь\n        "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/auth/about-auth",target:"_blank"}},[e._v("авторизировать")]),e._v("\n        пользователя  Gmail.\n    ")]),t("p",{staticClass:"subheading"},[t("strong",[e._v("\n            Пример использования Gmail API можно посмотреть "),t("a",{attrs:{href:"https://github.com/bsa-git/gapi-examples",target:"_blank"}},[e._v("здесь")])])])])}]}},683:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Google SignIn\n    * @param successCallback (Function)\n    * @param errorCallback (Function)\n    */\n    signIn (successCallback, errorCallback) {\n        window.gapi.auth2.getAuthInstance().signIn().then(function (googleUser) {\n            successCallback(googleUser)\n            if (debug) {\n                console.log('GoogleAuth.signIn - OK')\n            }\n        }, function (error) {\n            errorCallback(error)\n            console.log('GoogleAuth.signIn - Error: ', error)\n        })\n    }\n\n    ...\n\n")])])}]}},684:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Google Client load/init\n    * @param params (Object)\n    *  etc. {\n    *  apiKey: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n    *  clientId: 'xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com',\n    *  discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],\n    *  scope: 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send'\n    *  }\n    * @return {Promise}\n    */\n    loadClient (params) {\n        return new Promise(function (resolve, reject) {\n            _loadGoogleApi().then(function () {\n                if (debug) {\n                    console.log('loadGoogleAPI - OK')\n                }\n                return _initClient(params)\n            }).then(function () {\n                if (debug) {\n                    console.log('googleClient.init - OK')\n                }\n                // Load gmail library\n                window.gapi.client.load('gmail', 'v1', resolve)\n            })\n        })\n    }\n\n    /**\n    * Load google api\n    * @return {Promise}\n    * @private\n    */\n    _loadGoogleApi () {\n        return new Promise(function (resolve, reject) {\n            const script = document.createElement('script')\n            script.src = 'https://apis.google.com/js/platform.js'\n            script.onreadystatechange = script.onload = function () {\n                if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n                    setTimeout(function () {\n                        resolve()\n                    }, 500)\n                }\n            }\n            document.getElementsByTagName('head')[0].appendChild(script)\n        })\n    }\n\n    /**\n    * Google client  load/init\n    * @param params (Object)\n    *  etc. {\n    *  apiKey: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n    *  clientId: 'xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com',\n    *  discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],\n    *  scope: 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send'\n    *  }\n    * @return {Promise}\n    * @private\n    */\n    _initClient (params) {\n        return new Promise(function (resolve, reject) {\n            // Client Init\n            const initClient = function () {\n                window.gapi.client.init(params).then(() => {\n                    resolve()\n                }, (error) => {\n                    console.error('gapi.client.init - Error', error)\n                    alert(`gapi.client.init - Error: ${error.error}\\n Details: ${error.details}`)\n                })\n            }\n            window.gapi.load('client:auth2', initClient)\n        })\n    }\n\n    ...\n\n")])])}]}},694:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=t(141),a=t(681),r=t.n(a),o=t(679),i=t.n(o),l=t(680),c=t.n(l),g=t(726),d=t.n(g),u=t(727),m=t.n(u),x=t(728),p=t.n(x);n.default={components:{GmailInboxIntroduction:r.a,GmailInboxCode1:i.a,GmailInboxCode2:c.a,GmailInboxCode3:d.a,GmailInboxCode4:m.a,GmailInboxCode5:p.a},data:function(){return{title:"Gmail - Inbox",description:"Получить сообщения из Gmail Inbox."}},head:function(){return{title:this.title,meta:[{hid:"description",name:"description",content:this.description}],link:[]}},mounted:function(){this.$store.commit("SET_THEME","blog"),s.default.initBlock()}}},726:function(e,n,t){var s=t(71)(null,t(814),null,null);e.exports=s.exports},727:function(e,n,t){var s=t(71)(null,t(813),null,null);e.exports=s.exports},728:function(e,n,t){var s=t(71)(null,t(812),null,null);e.exports=s.exports},783:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("v-layout",{attrs:{row:"",wrap:""}},[t("v-flex",{attrs:{xs12:"",sm9:"","offset-sm1":""}},[t("div",{staticClass:"page-title text-xs-center"},[t("div",{staticClass:"headline"},[e._v(e._s(e.title))]),t("div",{staticClass:"subheading"},[e._v(e._s(e.description))])]),t("p",{staticClass:"date-publication"},[e._v("2017-11-08")]),t("v-card",{staticClass:"blog-post"},[t("v-card-text",[t("gmail-inbox-introduction"),t("section",[t("h2",[e._v("Ресурсы")]),t("dl",[t("dt",[t("strong",[e._v("Gmail API")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/guides/",target:"_blank"}},[e._v("Руководство по Gmail API")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages",target:"_blank"}},[e._v("Users.messages")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/list",target:"_blank"}},[e._v("Users.messages: list")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/get",target:"_blank"}},[e._v("Users.messages: get")])]),t("dd",[t("a",{attrs:{href:"http://opds.sut.ru/old/electronic_manuals/mail/1_Struct_el_soob.htm",target:"_blank"}},[e._v("Структура электронного сообщения")])]),t("dd",[t("a",{attrs:{href:"https://rfc2.ru/1521.rfc",target:"_blank"}},[e._v("RFC 1521 — Почтовый стандарт MIME")])]),t("dd",[t("a",{attrs:{href:"https://rfc2.ru/5322.rfc",target:"_blank"}},[e._v("RFC 5322 — Формат сообщений Internet (IMF)")])])])]),t("section",[t("h2",[e._v("Загрузка/Инициализация библиотеки Google API")]),t("p",[e._v("\n                        Вначале нужно загрузить и инициализировать клиенскую библиотеку Google API см. пр.1.\n                    ")]),t("kbd",[e._v("пр.1")]),t("gmail-inbox-code1")],1),t("section",[t("h2",[e._v("Получение сообщений (Users.messages: list)")]),t("div",{staticClass:"note"},[t("v-icon",{staticClass:"blue--text text--darken-2"},[e._v("grade")]),e._v("\n                        Требуется "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/list#auth",target:"_blank"}},[e._v("авторизация")])],1),t("p",[e._v("\n                        Получить список сообщений пользователя.\n                        Более подробную информацию по этой команде можно посмотреть "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/list",target:"_blank"}},[e._v("здесь")])]),t("p",[e._v("\n                        Прежде чем выполнить команду необходимо авторизироваться пользователю на Google сервере.\n                        Для этого нужно выполнить функцию\n                        "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/list#auth",target:"_blank"}},[e._v("авторизации")]),e._v(", см. пр.2:\n                    ")]),t("kbd",[e._v("пр.2")]),t("gmail-inbox-code2"),t("p",[e._v("\n                        После авторизации пользователя можно выполнить команду, см. пр.3:\n                    ")]),t("kbd",[e._v("пр.3")]),t("gmail-inbox-code3")],1),t("section",[t("h2",[e._v("Получение специфического сообщения (Users.messages: get)")]),t("div",{staticClass:"note"},[t("v-icon",{staticClass:"blue--text text--darken-2"},[e._v("grade")]),e._v("\n                        Требуется "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/get#auth",target:"_blank"}},[e._v("авторизация")])],1),t("p",[e._v("\n                        Получить специфическое сообщение пользователя.\n                        Более подробную информацию по этой команде можно посмотреть "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/get",target:"_blank"}},[e._v("здесь")])]),t("p",[e._v("\n                        Прежде чем выполнить команду необходимо авторизироваться пользователю на Google сервере.\n                        Для этого нужно выполнить функцию\n                        "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/get#auth",target:"_blank"}},[e._v("авторизации")]),e._v(", см. пр.2:\n                    ")]),t("p",[e._v("\n                        После авторизации пользователя можно выполнить команду, см. пр.4:\n                    ")]),t("kbd",[e._v("пр.4")]),t("gmail-inbox-code4")],1),t("section",[t("h2",[e._v('Получение сообщений в формате (text/html; charset="UTF-8")')]),t("div",{staticClass:"note"},[t("v-icon",{staticClass:"blue--text text--darken-2"},[e._v("grade")]),e._v("\n                        Требуется "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/list#auth",target:"_blank"}},[e._v("авторизация")])],1),t("p",[e._v('\n                        Для получения сообщений в формате (text/html; charset="UTF-8") используются команды\n                        (Users.messages: '),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/list",target:"_blank"}},[e._v("list")]),e._v("/"),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/get",target:"_blank"}},[e._v("get")]),e._v(").\n                    ")]),t("p",[e._v("\n                        Прежде чем выполнить эти команды необходимо авторизироваться пользователю на Google сервере см. пр.2.\n                        После авторизации пользователя можно выполнить следующий код, см. пр.5:\n                    ")]),t("kbd",[e._v("пр.5")]),t("gmail-inbox-code5")],1)],1)],1)],1)],1)},staticRenderFns:[]}},812:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n   /**\n   * Get inbox messages\n   * @param params\n   * etc. {\n      userId: 'me',\n      labelIds: 'INBOX',\n      maxResults: 10\n   * }\n   * @return {Promise}\n   */\n  getInbox (params) {\n    let arrPromises = []\n    return new Promise((resolve, reject) => {\n        _getMyMessagesList(params)\n        .then(list => {\n          _.forEach(list, function (item) {\n            arrPromises.push(_getMessageForId(item.id, params.userId))\n          })\n          const allPromises = Promise.all(arrPromises)\n          resolve(allPromises)\n        })\n    })\n  }\n\n  _getMyMessagesList (params) {\n    // Execute this request for 'gmail.users.messages.list'\n    const request = window.gapi.client.gmail.users.messages.list(params)\n    return new Promise((resolve, reject) => {\n      request.execute(function (response) {\n        if (debug) {\n          console.log('api.gmail.users.messages.list - Executed: ', response.messages)\n        }\n        resolve(response.messages)\n      })\n    })\n  }\n\n  _getMessageForId (id, userId) {\n    let _message = {}\n    // Execute this request for 'gmail.users.messages.get'\n    const messageRequest = window.gapi.client.gmail.users.messages.get({\n      'userId': userId,\n      'id': id\n    })\n    return new Promise((resolve, reject) => {\n      messageRequest.execute(message => {\n        // Parsing  message\n        _message.id = message.id\n        _message.from = _getHeader(message.payload.headers, 'From')\n        _message.subject = _getHeader(message.payload.headers, 'Subject')\n        _message.date = _getHeader(message.payload.headers, 'Date')\n        _message.reply_to = _getHeader(message.payload.headers, 'Reply-to')\n        _message.message_id = _getHeader(message.payload.headers, 'Message-ID')\n        _message.body = _getBody(message.payload)\n        if (debug) {\n          console.log('api.gmail.users.messages.get - Executed: ', _message)\n        }\n        resolve(_message)\n      })\n    })\n  }\n\n  _getHeader (headers, index) {\n    let headerValue = ''\n    _.forEach(headers, function (header) {\n      if (header.name.toLowerCase() === index.toLowerCase()) {\n        headerValue = header.value\n      }\n    })\n    return headerValue\n  }\n\n  _getBody (message) {\n    var encodedBody = ''\n    try {\n      if (typeof message.parts === 'undefined') {\n        encodedBody = message.body.data\n      } else {\n        encodedBody = _getHTMLPart(message.parts)\n      }\n      return _b64UrlDecodeUnicode(encodedBody)\n    } catch (error) {\n      console.error('apiGmail._getBody - Error', error)\n      throw error\n    }\n  }\n\n  _getHTMLPart (arr) {\n    for (let x = 0; x <= arr.length; x++) {\n      if (typeof arr[x].parts === 'undefined') {\n        if (arr[x].mimeType === 'text/html') {\n          return arr[x].body.data\n        }\n      } else {\n        return _getHTMLPart(arr[x].parts)\n      }\n    }\n    return ''\n  }\n\n  /**\n   * To decode the Base64-encoded-url value back into a String\n   *\n   * @param str\n   * @return {string}\n   */\n  _b64UrlDecodeUnicode (str) {\n    const encodedBody = str.replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, '')\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return decodeURIComponent(atob(encodedBody).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n    }).join(''))\n  }\n\n    ...\n\n")])])}]}},813:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Get Message with given ID.\n    *\n    * @param  {String} userId User's email address. The special value 'me'\n    * can be used to indicate the authenticated user.\n    * @param  {String} messageId ID of Message to get.\n    * @param  {Function} callback Function to call when the request is complete.\n    */\n    function getMessage(userId, messageId, callback) {\n        var request = gapi.client.gmail.users.messages.get({\n            'userId': userId,\n            'id': messageId\n        });\n        request.execute(callback);\n    }\n\n    ...\n\n")])])}]}},814:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Retrieve Messages in user's mailbox matching query.\n    *\n    * @param  {String} userId User's email address. The special value 'me'\n    * can be used to indicate the authenticated user.\n    * @param  {String} query String used to filter the Messages listed.\n    * @param  {Function} callback Function to call when the request is complete.\n    */\n    function listMessages(userId, query, callback) {\n        var getPageOfMessages = function(request, result) {\n            request.execute(function(resp) {\n                result = result.concat(resp.messages);\n                var nextPageToken = resp.nextPageToken;\n                if (nextPageToken) {\n                    request = gapi.client.gmail.users.messages.list({\n                        'userId': userId,\n                        'pageToken': nextPageToken,\n                        'q': query\n                    });\n                    getPageOfMessages(request, result);\n                } else {\n                    callback(result);\n                }\n            });\n        };\n        var initialRequest = gapi.client.gmail.users.messages.list({\n            'userId': userId,\n            'q': query\n        });\n        getPageOfMessages(initialRequest, []);\n    }\n\n    ...\n\n")])])}]}}});