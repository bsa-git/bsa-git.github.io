webpackJsonp([8],{699:function(e,n,t){var s=t(73)(t(744),t(937),null,null);e.exports=s.exports},726:function(e,n,t){var s=t(73)(null,t(727),null,null);e.exports=s.exports},727:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("section",{staticClass:"text-xs-right"},[t("v-btn",{attrs:{icon:"",router:"",to:"/blog/list",title:"Блог"}},[t("v-icon",[e._v("library_books")])],1)],1)},staticRenderFns:[]}},728:function(e,n,t){var s=t(73)(null,t(733),null,null);e.exports=s.exports},729:function(e,n,t){var s=t(73)(null,t(732),null,null);e.exports=s.exports},730:function(e,n,t){var s=t(73)(null,t(731),null,null);e.exports=s.exports},731:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("section",[t("h1",[e._v("Введение.")]),t("p",[e._v("\n        Gmail API является RESTful API, которое можно использовать для доступа к почтовым сообщениям пользователя\n        и отправлять электронные сообщения. Для большинства веб приложений (включая мобильные приложения),\n        Gmail API является лучшим выбором для авторизованного доступа к пользовательским данным Gmail.")]),t("p",[e._v("\n        Gmail API дает вам гибкий RESTful доступ к пользовательскому почтовому ящику с естественным\n        интерфейсом к "),t("code",[e._v("Threads, Messages, Labels, Drafts, History, и Settings")]),e._v(". Этот интерфейс реализован\n        на многих современных языках программирования. Ваше приложение может использовать это API, чтобы\n        опеспечить следущие возможности Gmail:\n    ")]),t("ul",[t("li",[e._v("Читать сообщения с Gmail;")]),t("li",[e._v("Передавать email сообщения;")]),t("li",[e._v("Поиск соответствующих сообщений;")]),t("li",[e._v("\n            Создавать фильтры для автоматической маркировки, пересылки или архивирования сообщений.\n        ")])]),t("br"),t("p",[e._v("\n        Все что вам необходимо чтобы использовать Gmail API - это выбрать\n        "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/downloads",target:"_blank"}},[e._v("клиенскую библиотеку")]),e._v("\n        для вашего языка программирования и ваше приложение должно уметь\n        "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/auth/about-auth",target:"_blank"}},[e._v("авторизировать")]),e._v("\n        пользователя  Gmail.\n    ")]),t("p",{staticClass:"subheading"},[t("strong",[e._v("\n            Пример использования Gmail API на "),t("strong",[e._v("GitHub")]),e._v(" можно посмотреть "),t("a",{attrs:{href:"https://github.com/bsa-git/gapi-examples",target:"_blank"}},[e._v("здесь")])])])])}]}},732:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Google SignIn\n    * @param successCallback (Function)\n    * @param errorCallback (Function)\n    */\n    signIn (successCallback, errorCallback) {\n        window.gapi.auth2.getAuthInstance().signIn().then(function (googleUser) {\n            successCallback(googleUser)\n            if (debug) {\n                console.log('GoogleAuth.signIn - OK')\n            }\n        }, function (error) {\n            errorCallback(error)\n            console.log('GoogleAuth.signIn - Error: ', error)\n        })\n    }\n\n    ...\n\n")])])}]}},733:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Google Client load/init\n    * @param params (Object)\n    *  etc. {\n    *  apiKey: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n    *  clientId: 'xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com',\n    *  discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],\n    *  scope: 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send'\n    *  }\n    * @return {Promise}\n    */\n    loadClient (params) {\n        return new Promise(function (resolve, reject) {\n            _loadGoogleApi().then(function () {\n                if (debug) {\n                    console.log('loadGoogleAPI - OK')\n                }\n                return _initClient(params)\n            }).then(function () {\n                if (debug) {\n                    console.log('googleClient.init - OK')\n                }\n                // Load gmail library\n                window.gapi.client.load('gmail', 'v1', resolve)\n            })\n        })\n    }\n\n    /**\n    * Load google api\n    * @return {Promise}\n    * @private\n    */\n    _loadGoogleApi () {\n        return new Promise(function (resolve, reject) {\n            const script = document.createElement('script')\n            script.src = 'https://apis.google.com/js/platform.js'\n            script.onreadystatechange = script.onload = function () {\n                if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n                    setTimeout(function () {\n                        resolve()\n                    }, 500)\n                }\n            }\n            document.getElementsByTagName('head')[0].appendChild(script)\n        })\n    }\n\n    /**\n    * Google client  load/init\n    * @param params (Object)\n    *  etc. {\n    *  apiKey: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n    *  clientId: 'xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com',\n    *  discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],\n    *  scope: 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/gmail.send'\n    *  }\n    * @return {Promise}\n    * @private\n    */\n    _initClient (params) {\n        return new Promise(function (resolve, reject) {\n            // Client Init\n            const initClient = function () {\n                window.gapi.client.init(params).then(() => {\n                    resolve()\n                }, (error) => {\n                    console.error('gapi.client.init - Error', error)\n                    alert(`gapi.client.init - Error: ${error.error}\\n Details: ${error.details}`)\n                })\n            }\n            window.gapi.load('client:auth2', initClient)\n        })\n    }\n\n    ...\n\n")])])}]}},744:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var s=t(147),r=t(726),a=t.n(r),o=t(730),i=t.n(o),l=t(728),c=t.n(l),x=t(729),d=t.n(x),g=t(787),u=t.n(g);n.default={components:{LinkToBlog:a.a,GmailSendIntroduction:i.a,GmailSendCode1:c.a,GmailSendCode2:d.a,GmailSendCode3:u.a},data:function(){return{title:"Gmail - Send Message",description:"Передача сообщений через Gmail Client API."}},head:function(){return{title:this.title,meta:[{hid:"description",name:"description",content:this.description}],link:[]}},mounted:function(){this.$store.commit("SET_THEME","blog"),s.default.initBlock()}}},787:function(e,n,t){var s=t(73)(null,t(934),null,null);e.exports=s.exports},934:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement;e._self._c;return e._m(0)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("pre",[t("code",{staticClass:"highlight js"},[e._v("\n\n    ...\n\n    /**\n    * Send email\n    * @param params\n    * etc.{\n    userId: 'me',\n    to: my@test.com,\n    subject: Request for my resume from the employer,\n    message: 'My Message!',\n    callback: function () {\n    ....\n    }\n    * }\n    */\n    send (params) {\n        try {\n            const headers = {\n                'To': params.to,\n                'Subject': params.subject,\n                'Content-Type': 'text/html; charset=\"UTF-8\"'\n            }\n\n            let email = ''\n            _.forEach(headers, function (value, key) {\n                email += `${key}: ${value}` + '\\r\\n'\n            })\n\n            email += '\\r\\n' + params.message\n            const base64EncodedEmail = _b64UrlEncodeUnicode(email)\n            const sendRequest = window.gapi.client.gmail.users.messages.send({\n                'userId': params.userId,\n                'resource': {\n                    'raw': base64EncodedEmail\n                }\n            })\n            sendRequest.execute(params.callback)\n        } catch (e) {\n            throw e\n        }\n    }\n\n    /**\n    * To encode the unicode string into Base64-encoded-url value\n    *\n    * @param str\n    * @return {string}\n    */\n    _b64UrlEncodeUnicode (str) {\n        // first we use encodeURIComponent to get percent-encoded UTF-8,\n        // then we convert the percent encodings into raw bytes which\n        // can be fed into btoa.\n        const b64Encoded = btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes (match, p1) {\n                return String.fromCharCode('0x' + p1)\n            }))\n        // Replace for URL\n        return b64Encoded.replace(/\\+/g, '-').replace(/\\//g, '_')\n    }\n\n    ...\n\n")])])}]}},937:function(e,n){e.exports={render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("v-layout",{attrs:{row:"",wrap:""}},[t("v-flex",{attrs:{xs12:"",sm9:"","offset-sm1":""}},[t("div",{staticClass:"page-title text-xs-center"},[t("div",{staticClass:"headline"},[e._v(e._s(e.title))]),t("div",{staticClass:"subheading"},[e._v(e._s(e.description))])]),t("p",{staticClass:"date-publication"},[e._v("2017-11-08")]),t("v-card",{staticClass:"blog-post"},[t("v-card-text",[t("link-to-blog"),t("gmail-send-introduction"),t("section",[t("h2",[e._v("Ресурсы")]),t("dl",[t("dt",[t("strong",[e._v("Gmail API")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/guides/",target:"_blank"}},[e._v("Руководство по Gmail API")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages",target:"_blank"}},[e._v("Users.messages")])]),t("dd",[t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/send",target:"_blank"}},[e._v("Users.messages: send")])]),t("dd",[t("a",{attrs:{href:"http://opds.sut.ru/old/electronic_manuals/mail/1_Struct_el_soob.htm",target:"_blank"}},[e._v("Структура электронного сообщения")])]),t("dd",[t("a",{attrs:{href:"https://rfc2.ru/1521.rfc",target:"_blank"}},[e._v("RFC 1521 — Почтовый стандарт MIME")])]),t("dd",[t("a",{attrs:{href:"https://rfc2.ru/5322.rfc",target:"_blank"}},[e._v("RFC 5322 — Формат сообщений Internet (IMF)")])])])]),t("section",[t("h2",[e._v("Загрузка/Инициализация клиенской библиотеки Google API")]),t("p",[e._v("\n                        Вначале нужно загрузить и инициализировать клиенскую библиотеку Google API см. пр.1.\n                    ")]),t("kbd",[e._v("пр.1")]),t("gmail-send-code1")],1),t("section",[t("h2",[e._v("Передача email сообщений (Users.messages: send)")]),t("div",{staticClass:"note"},[t("v-icon",{staticClass:"blue--text text--darken-2"},[e._v("grade")]),e._v("\n                        Требуется "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/send#auth",target:"_blank"}},[e._v("авторизация")])],1),t("p",[e._v("\n                        Отправляет указанное сообщение получателям в "),t("code",[e._v("To, Cc, Bcc")]),e._v(" заголовках.\n                    ")]),t("p",[e._v("\n                        Этот метод поддерживает "),t("code",[e._v("/upload URI")]),e._v("\n                        и может передавать медиа со следующими характеристиками:\n                    ")]),t("ul",[t("li",[e._v("Максимальный размер файла: 35MB")]),t("li",[e._v("Предполагает Media MIME типы: message/rfc822")])]),t("p",[e._v("\n                        Более подробную информацию по передаче email сообщений можно посмотреть "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/v1/reference/users/messages/send",target:"_blank"}},[e._v("здесь")])]),t("p",[e._v("\n                        Прежде чем передать сообщение необходимо авторизироваться пользователю на Google сервере.\n                        Для этого нужно выполнить функцию\n                        "),t("a",{attrs:{href:"https://developers.google.com/identity/sign-in/web/reference#googleauthsignin",target:"_blank"}},[e._v("авторизации")]),e._v(", см. пр.2:\n                    ")]),t("kbd",[e._v("пр.2")]),t("gmail-send-code2"),t("p",[e._v("\n                        После авторизации пользователя можно передать сообщение см. пр.3:\n                    ")]),t("kbd",[e._v("пр.3")]),t("gmail-send-code3")],1)],1)],1)],1)],1)},staticRenderFns:[]}}});