webpackJsonp([1],{710:function(t,e,n){var r=n(73)(n(756),n(956),null,null);t.exports=r.exports},725:function(t,e,n){var r=n(73)(null,n(726),null,null);t.exports=r.exports},726:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",{staticClass:"text-xs-right"},[n("v-btn",{attrs:{icon:"",router:"",to:"/portfolio/list",title:"Портфолио"}},[n("v-icon",[t._v("shop")])],1)],1)},staticRenderFns:[]}},756:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(147),s=n(725),o=n.n(s),a=n(810),i=n.n(a),_=n(812),v=n.n(_),l=n(813),d=n.n(l),c=n(814),p=n.n(c),u=n(815),g=n.n(u),h=n(816),m=n.n(h),f=n(817),b=n.n(f),k=n(818),E=n.n(k),w=n(819),S=n.n(w),I=n(811),x=n.n(I);e.default={components:{LinkToPortfolio:o.a,ExpressPassportCode1:i.a,ExpressPassportCode2:v.a,ExpressPassportCode3:d.a,ExpressPassportCode4:p.a,ExpressPassportCode5:g.a,ExpressPassportCode6:m.a,ExpressPassportCode7:b.a,ExpressPassportCode8:E.a,ExpressPassportCode9:S.a,ExpressPassportCode10:x.a},data:function(){return{title:"Passport for Node.js",description:"Примеры аутентификации/авторизации пользователя."}},head:function(){return{title:this.title,meta:[{hid:"description",name:"description",content:this.description}]}},mounted:function(){this.$store.commit("SET_THEME","portfolio"),r.default.initBlock()}}},810:function(t,e,n){var r=n(73)(null,n(915),null,null);t.exports=r.exports},811:function(t,e,n){var r=n(73)(null,n(963),null,null);t.exports=r.exports},812:function(t,e,n){var r=n(73)(null,n(916),null,null);t.exports=r.exports},813:function(t,e,n){var r=n(73)(null,n(917),null,null);t.exports=r.exports},814:function(t,e,n){var r=n(73)(null,n(918),null,null);t.exports=r.exports},815:function(t,e,n){var r=n(73)(null,n(919),null,null);t.exports=r.exports},816:function(t,e,n){var r=n(73)(null,n(920),null,null);t.exports=r.exports},817:function(t,e,n){var r=n(73)(null,n(921),null,null);t.exports=r.exports},818:function(t,e,n){var r=n(73)(null,n(922),null,null);t.exports=r.exports},819:function(t,e,n){var r=n(73)(null,n(923),null,null);t.exports=r.exports},915:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",[n("thead",[n("tr",[n("th",[t._v("Имя файла")]),n("th",[t._v("Описание")])])]),n("tbody",[n("tr",[n("td",[n("strong",[t._v("config")]),t._v("/mongod.config.yml")]),n("td",[t._v("Конфигурация для MongoDB.")])]),n("tr",[n("td",[n("strong",[t._v("config")]),t._v("/passport.js")]),n("td",[t._v("Passport Local и OAuth стратегии, плюс логин middleware.")])]),n("tr",[n("td",[n("strong",[t._v("controllers")]),t._v("/api.js")]),n("td",[t._v("Контроллер для /api маршрутизации и всех api примеров.")])]),n("tr",[n("td",[n("strong",[t._v("controllers")]),t._v("/contact.js")]),n("td",[t._v("Котроллер для работы с формой контактов.")])]),n("tr",[n("td",[n("strong",[t._v("controllers")]),t._v("/home.js")]),n("td",[t._v("Контроллер для домашней страницы (home).")])]),n("tr",[n("td",[n("strong",[t._v("controllers")]),t._v("/index.js")]),n("td",[t._v("Привязка контроллеров к маршрутам.")])]),n("tr",[n("td",[n("strong",[t._v("controllers")]),t._v("/user.js")]),n("td",[t._v("Контроллер для управления учетными записями пользователей.")])]),n("tr",[n("td",[n("strong",[t._v("data")]),t._v("/"),n("strong",[t._v("db")]),t._v("/"),n("strong",[t._v("mongod")])]),n("td",[t._v("Папка расположения базы данных MongoDB.")])]),n("tr",[n("td",[n("strong",[t._v("data")]),t._v("/"),n("strong",[t._v("log")]),t._v("/"),n("strong",[t._v("mongod")])]),n("td",[t._v("Папка расположения логов для базы данных MongoDB.")])]),n("tr",[n("td",[n("strong",[t._v("data")]),t._v("/"),n("strong",[t._v("uploads")])]),n("td",[t._v("Папка для загрузки файлов.")])]),n("tr",[n("td",[n("strong",[t._v("models")]),t._v("/index.js")]),n("td",[t._v("Соединение с базой данных MongoDB.")])]),n("tr",[n("td",[n("strong",[t._v("models")]),t._v("/User.js")]),n("td",[t._v("Mongoose схема и модель для пользователя.")])]),n("tr",[n("td",[n("strong",[t._v("public")]),t._v("/")]),n("td",[t._v("Папка для публичных данных (css, js, images).")])]),n("tr",[n("td",[n("strong",[t._v("views/account")]),t._v("/")]),n("td",[t._v("Шаблон для "),n("em",[t._v("изменения данных профайла, изменения пароля, удаления аккаунта, добавление ссылок на другие аккаунты.")]),t._v(".\n        ")])]),n("tr",[n("td",[n("strong",[t._v("views/api")]),t._v("/")]),n("td",[t._v("Шаблон для тестирования API различных сервисов.")])]),n("tr",[n("td",[n("strong",[t._v("views/partials")]),t._v("/flash.pug")]),n("td",[t._v("Шаблон для отображения предупреждений об ошибках, информации и успешного завершения операции.")])]),n("tr",[n("td",[n("strong",[t._v("views/partials")]),t._v("/header.pug")]),n("td",[t._v("Шаблон для отображения верхнего меню.")])]),n("tr",[n("td",[n("strong",[t._v("views/partials")]),t._v("/footer.pug")]),n("td",[t._v("Шаблон для отображения нижнего колонтитула.")])]),n("tr",[n("td",[n("strong",[t._v("views")]),t._v("/contact.pug")]),n("td",[t._v("Шаблон формы контактов.")])]),n("tr",[n("td",[n("strong",[t._v("views")]),t._v("/error.pug")]),n("td",[t._v("Шаблон для отображения ошибок.")])]),n("tr",[n("td",[n("strong",[t._v("views")]),t._v("/home.pug")]),n("td",[t._v("Шаблон для отображения домашней страницы.")])]),n("tr",[n("td",[n("strong",[t._v("views")]),t._v("/layout.pug")]),n("td",[t._v("Шаблон основного макета.")])]),n("tr",[n("td",[t._v(".env")]),n("td",[t._v("Ваши реальные API ключи, уникальные данные, пароли и  URI базы данных.")])]),n("tr",[n("td",[t._v(".env.example")]),n("td",[t._v("Примеры API ключей, уникальных данных, паролей и  URI базы данных.")])]),n("tr",[n("td",[t._v(".gitignore")]),n("td",[t._v("Папки и файлы, которые будут игнорироваться системой управления версиями "),n("strong",[t._v("Git")]),t._v(".")])]),n("tr",[n("td",[t._v("app.js")]),n("td",[t._v("Главный файл приложения.")])]),n("tr",[n("td",[t._v("package.json")]),n("td",[t._v("NPM зависимости.")])]),n("tr",[n("td",[t._v("package-lock.json")]),n("td",[t._v("Содержит точные версии зависимостей NPM в package.json.")])]),n("tr",[n("td",[t._v("server.js")]),n("td",[t._v("Запуск локального сервера.")])])])])}]}},916:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",[n("table",[n("thead",[n("tr",[n("th",[t._v("Пакет")]),n("th",[t._v("Описание")])])]),n("tbody",[n("tr",[n("td",[t._v("@octokit/rest")]),n("td",[t._v("GitHub API library.")])]),n("tr",[n("td",[t._v("@sendgrid/mail")]),n("td",[t._v("Mail library.")])]),n("tr",[n("td",[t._v("bcrypt-nodejs")]),n("td",[t._v("Library for hashing and salting user passwords.")])]),n("tr",[n("td",[t._v("body-parser")]),n("td",[t._v("Node.js body parsing middleware.")])]),n("tr",[n("td",[t._v("chalk")]),n("td",[t._v("Terminal string styling done right.")])]),n("tr",[n("td",[t._v("cheerio")]),n("td",[t._v("Scrape web pages using jQuery-style syntax.")])]),n("tr",[n("td",[t._v("clockwork")]),n("td",[t._v("Clockwork SMS API library.")])]),n("tr",[n("td",[t._v("compression")]),n("td",[t._v("Node.js compression middleware.")])]),n("tr",[n("td",[t._v("cross-env")]),n("td",[t._v("Setting environment variables.")])]),n("tr",[n("td",[t._v("debug")]),n("td",[t._v("Debug library.")])]),n("tr",[n("td",[t._v("dotenv")]),n("td",[t._v("Loads environment variables from .env file.")])]),n("tr",[n("td",[t._v("express")]),n("td",[t._v("Node.js web framework.")])]),n("tr",[n("td",[t._v("express-flash")]),n("td",[t._v("Provides flash messages for Express.")])]),n("tr",[n("td",[t._v("express-session")]),n("td",[t._v("Simple session middleware for Express.")])]),n("tr",[n("td",[t._v("express-status-monitor")]),n("td",[t._v("Reports real-time server metrics for Express.")])]),n("tr",[n("td",[t._v("express-validator")]),n("td",[t._v("Easy form validation for Express.")])]),n("tr",[n("td",[t._v("fbgraph")]),n("td",[t._v("Facebook Graph API library.")])]),n("tr",[n("td",[t._v("instagram-node")]),n("td",[t._v("Instagram API library.")])]),n("tr",[n("td",[t._v("lastfm")]),n("td",[t._v("Last.fm API library.")])]),n("tr",[n("td",[t._v("lob")]),n("td",[t._v("Lob API library.")])]),n("tr",[n("td",[t._v("lusca")]),n("td",[t._v("CSRF middleware.")])]),n("tr",[n("td",[t._v("mongoose")]),n("td",[t._v("MongoDB ODM.")])]),n("tr",[n("td",[t._v("morgan")]),n("td",[t._v("HTTP request logger middleware for node.js.")])]),n("tr",[n("td",[t._v("multer")]),n("td",[t._v("Node.js middleware for handling "),n("code",[t._v("multipart/form-data")]),t._v(".")])]),n("tr",[n("td",[t._v("node-foursquare")]),n("td",[t._v("Foursquare API library.")])]),n("tr",[n("td",[t._v("node-linkedin")]),n("td",[t._v("LinkedIn API library.")])]),n("tr",[n("td",[t._v("passport")]),n("td",[t._v("Simple and elegant authentication library for node.js.")])]),n("tr",[n("td",[t._v("passport-facebook")]),n("td",[t._v("Sign-in with Facebook plugin.")])]),n("tr",[n("td",[t._v("passport-github")]),n("td",[t._v("Sign-in with GitHub plugin.")])]),n("tr",[n("td",[t._v("passport-google-oauth")]),n("td",[t._v("Sign-in with Google plugin.")])]),n("tr",[n("td",[t._v("passport-instagram")]),n("td",[t._v("Sign-in with Instagram plugin.")])]),n("tr",[n("td",[t._v("passport-linkedin-oauth2")]),n("td",[t._v("Sign-in with LinkedIn plugin.")])]),n("tr",[n("td",[t._v("passport-local")]),n("td",[t._v("Sign-in with Username and Password plugin.")])]),n("tr",[n("td",[t._v("passport-openid")]),n("td",[t._v("Sign-in with OpenId plugin.")])]),n("tr",[n("td",[t._v("passport-oauth")]),n("td",[t._v("Allows you to set up your own OAuth 1.0a and OAuth 2.0 strategies.")])]),n("tr",[n("td",[t._v("passport-twitter")]),n("td",[t._v("Sign-in with Twitter plugin.")])]),n("tr",[n("td",[t._v("paypal-rest-sdk")]),n("td",[t._v("PayPal APIs library.")])]),n("tr",[n("td",[t._v("pug (jade)")]),n("td",[t._v("Template engine for Express.")])]),n("tr",[n("td",[t._v("request")]),n("td",[t._v("Simplified HTTP request library.")])]),n("tr",[n("td",[t._v("stripe")]),n("td",[t._v("Offical Stripe API library.")])]),n("tr",[n("td",[t._v("tumblr.js")]),n("td",[t._v("Tumblr API library.")])]),n("tr",[n("td",[t._v("twilio")]),n("td",[t._v("Twilio API library.")])]),n("tr",[n("td",[t._v("twit")]),n("td",[t._v("Twitter API library.")])]),n("tr",[n("td",[t._v("validator")]),n("td",[t._v("Used in conjunction with express-validator in "),n("strong",[t._v("controllers/api.js")]),t._v(".")])])])])])}]}},917:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight"},[t._v("\n    MY_EMAIL=my@mail.com\n\n    BASE_URL=http://localhost:8080\n    MONGODB_URI=mongodb://localhost:27017/test\n\n    SESSION_SECRET=Your Session Secret goes here\n\n    MAILGUN_USER=postmaster@sandbox697fcddc09814c6b83718b9fd5d4e5dc.mailgun.org\n    MAILGUN_PASSWORD=29eldds1uri6\n\n    SENDGRID_USER=hslogin\n    SENDGRID_PASSWORD=hspassword00\n    SENDGRID_API_KEY=SG.EV-XXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n    NYT_KEY=9548be6f3a64163d23e1539f067fcabd:5:68537648\n\n    LASTFM_KEY=c8c0ea1c4a6b199b3429722512fbd17f\n    LASTFM_SECRET=is cb7857b8fba83f819ea46ca13681fe71\n\n    FACEBOOK_ID=754220301289665\n    FACEBOOK_SECRET=41860e58c256a3d7ad8267d3c1939a4a\n\n    INSTAGRAM_ID=9f5c39ab236a48e0aec354acb77eee9b\n    INSTAGRAM_SECRET=5920619aafe842128673e793a1c40028\n\n    GITHUB_ID=cb448b1d4f0c743a1e36\n    GITHUB_SECRET=815aa4606f476444691c5f1c16b9c70da6714dc6\n\n    TWITTER_KEY=6NNBDyJ2TavL407A3lWxPFKBI\n    TWITTER_SECRET=ZHaYyK3DQCqv49Z9ofsYdqiUgeoICyh6uoBgFfu7OeYC7wTQKa\n\n    GOOGLE_ID=828110519058.apps.googleusercontent.com\n    GOOGLE_SECRET=JdZsIaWhUFIchmC1a_IZzOHb\n\n    LINKEDIN_ID=77chexmowru601\n    LINKEDIN_SECRET=szdC8lN2s2SuMSy8\n    LINKEDIN_CALLBACK_URL=http://localhost:8080/auth/linkedin/callback\n\n    STEAM_KEY=D1240DEF4D41D416FD291D0075B6ED3F\n\n    TWILIO_SID=AC6f0edc4c47becc6d0a952536fc9a6025\n    TWILIO_TOKEN=a67170ff7afa2df3f4c7d97cd240d0f3\n\n    CLOCKWORK_KEY=9ffb267f88df55762f74ba2f517a66dc8bedac5a\n\n    STRIPE_SKEY=sk_test_BQokikJOvBiI2HlWgH4olfQ2\n    STRIPE_PKEY=pk_test_6pRNASCoBOKtIshFeQd4XMUh\n\n    TUMBLR_KEY=FaXbGf5gkhswzDqSMYI42QCPYoHsu5MIDciAhTyYjehotQpJvM\n    TUMBLR_SECRET=QpCTs5IMMCsCImwdvFiqyGtIZwowF5o3UXonjPoNp4HVtJAL4o\n\n    FOURSQUARE_ID=2STROLSFBMZLAHG3IBA141EM2HGRF0IRIBB4KXMOGA2EH3JG\n    FOURSQUARE_SECRET=UAABFAWTIHIUFBL0PDC3TDMSXJF2GTGWLD3BES1QHXKAIYQB\n    FOURSQUARE_REDIRECT_URL=http://localhost:8080/auth/foursquare/callback\n\n    PAYPAL_ID=AdGE8hDyixVoHmbhASqAThfbBcrbcgiJPBwlAM7u7Kfq3YU-iPGc6BXaTppt\n    PAYPAL_SECRET=EPN0WxB5PaRaumTB1ZpCuuTqLqIlF6_EWUcAbZV99Eu86YeNBVm9KVsw_Ez5\n    PAYPAL_RETURN_URL=http://localhost:8080/api/paypal/success\n    PAYPAL_CANCEL_URL=http://localhost:8080/api/paypal/cancel\n\n    LOB_KEY=test_814e892b199d65ef6dbb3e4ad24689559ca\n\n    PINTEREST_ID=4819282851912494691\n    PINTEREST_SECRET=b32f578ad83d94c058c6682329220feda7e5817e043a1cc4a5a1e28f51c70301\n    PINTEREST_REDIRECT_URL=https://localhost:8080/auth/pinterest/callback\n\n    GOOGLE_MAP_API_KEY=google-map-api-key\n\n")])])}]}},918:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n const userSchema = new mongoose.Schema({\n    email: {type: String, unique: true},\n    password: String,\n    passwordResetToken: String,\n    passwordResetExpires: Date,\n\n    facebook: String,\n    twitter: String,\n    google: String,\n    github: String,\n    instagram: String,\n    linkedin: String,\n    steam: String,\n    tokens: Array,\n\n    profile: {\n        name: String,\n        gender: String,\n        location: String,\n        website: String,\n        picture: String\n    }\n}, {timestamps: true});\n\n")])])}]}},919:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n/**\n * Sign in using Email and Password.\n */\npassport.use('local', new LocalStrategy({usernameField: 'email'}, (email, password, done) => {\n    User.findOne({email: email.toLowerCase()}, (err, user) => {\n        if (err) {\n            return done(err);\n        }\n        if (!user) {\n            return done(null, false, {msg: `Email ${email} not found.`});\n        }\n        user.comparePassword(password, (err, isMatch) => {\n            if (err) {\n                return done(err);\n            }\n            if (isMatch) {\n                return done(null, user);\n            }\n            return done(null, false, {msg: 'Invalid email or password.'});\n        });\n    });\n}));\n    ")])])}]}},920:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n/**\n * OAuth Strategy Overview\n *\n * - User is already logged in.\n *   - Check if there is an existing account with a provider id.\n *     - If there is, return an error message. (Account merging not supported)\n *     - Else link new OAuth account with currently logged-in user.\n * - User is not logged in.\n *   - Check if it's a returning user.\n *     - If returning user, sign in and we are done.\n *     - Else check if there is an existing account with user's email.\n *       - If there is, return an error message.\n *       - Else create a new account.\n */\n\n/**\n * Sign in with GitHub.\n */\npassport.use('github', new GitHubStrategy({\n    clientID: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET,\n    callbackURL: '/auth/github/callback',\n    passReqToCallback: true\n}, (req, accessToken, refreshToken, profile, done) => {\n    if (req.user) {\n        User.findOne({github: profile.id}, (err, existingUser) => {\n            if (existingUser) {\n                req.flash('errors', {msg: 'There is already a GitHub account that belongs to you. Sign in with that account or delete it, then link it with your current account.'});\n                done(err);\n            } else {\n                User.findById(req.user.id, (err, user) => {\n                    if (err) {\n                        return done(err);\n                    }\n                    user.github = profile.id;\n                    user.tokens.push({kind: 'github', accessToken});\n                    user.profile.name = user.profile.name || profile.displayName;\n                    user.profile.picture = user.profile.picture || profile._json.avatar_url;\n                    user.profile.location = user.profile.location || profile._json.location;\n                    user.profile.website = user.profile.website || profile._json.blog;\n                    user.save((err) => {\n                        req.flash('info', {msg: 'GitHub account has been linked.'});\n                        done(err, user);\n                    });\n                });\n            }\n        });\n    } else {\n        User.findOne({github: profile.id}, (err, existingUser) => {\n            if (err) {\n                return done(err);\n            }\n            if (existingUser) {\n                return done(null, existingUser);\n            }\n            User.findOne({email: profile._json.email}, (err, existingEmailUser) => {\n                if (err) {\n                    return done(err);\n                }\n                if (existingEmailUser) {\n                    req.flash('errors', {msg: 'There is already an account using this email address. Sign in to that account and link it with GitHub manually from Account Settings.'});\n                    done(err);\n                } else {\n                    const user = new User();\n                    user.email = profile._json.email;\n                    user.github = profile.id;\n                    user.tokens.push({kind: 'github', accessToken});\n                    user.profile.name = profile.displayName;\n                    user.profile.picture = profile._json.avatar_url;\n                    user.profile.location = profile._json.location;\n                    user.profile.website = profile._json.blog;\n                    user.save((err) => {\n                        done(err, user);\n                    });\n                }\n            });\n        });\n    }\n}));\n    ")])])}]}},921:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n/**\n * Tumblr API OAuth.\n */\npassport.use('tumblr', new OAuthStrategy({\n    requestTokenURL: 'https://www.tumblr.com/oauth/request_token',\n    accessTokenURL: 'https://www.tumblr.com/oauth/access_token',\n    userAuthorizationURL: 'https://www.tumblr.com/oauth/authorize',\n    consumerKey: process.env.TUMBLR_KEY,\n    consumerSecret: process.env.TUMBLR_SECRET,\n    callbackURL: '/auth/tumblr/callback',\n    passReqToCallback: true\n}, (req, token, tokenSecret, profile, done) => {\n    User.findById(req.user._id, (err, user) => {\n        if (err) {\n            return done(err);\n        }\n        user.tokens.push({kind: 'tumblr', accessToken: token, tokenSecret});\n        user.save((err) => {\n            done(err, user);\n        });\n    });\n}));\n    ")])])}]}},922:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n/**\n * Pinterest API OAuth2.\n */\npassport.use('pinterest', new OAuth2Strategy({\n    authorizationURL: 'https://api.pinterest.com/oauth/',\n    tokenURL: 'https://api.pinterest.com/v1/oauth/token',\n    clientID: process.env.PINTEREST_ID,\n    clientSecret: process.env.PINTEREST_SECRET,\n    callbackURL: process.env.PINTEREST_REDIRECT_URL,\n    passReqToCallback: true\n}, (req, accessToken, refreshToken, profile, done) => {\n    User.findById(req.user._id, (err, user) => {\n        if (err) {\n            return done(err);\n        }\n        user.tokens.push({kind: 'pinterest', accessToken});\n        user.save((err) => {\n            done(err, user);\n        });\n    });\n}));\n    ")])])}]}},923:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n/**\n * Helper method for getting user's gravatar.\n */\nuserSchema.methods.gravatar = function gravatar(size) {\n    if (!size) {\n        size = 200;\n    }\n    if (!this.email) {\n        return `https://gravatar.com/avatar/?s=${size}&d=retro`;\n    }\n    const md5 = crypto.createHash('md5').update(this.email).digest('hex');\n    return `https://secure.gravatar.com/avatar/${md5}?s=${size}&d=retro`;\n};\n    ")])])}]}},956:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:"",sm9:"","offset-sm1":""}},[n("div",{staticClass:"page-title text-xs-center"},[n("div",{staticClass:"headline"},[t._v(t._s(t.title))]),n("div",{staticClass:"subheading"},[t._v(t._s(t.description))])]),n("p",{staticClass:"date-publication"},[t._v("2018-06-20")]),n("v-card",{staticClass:"blog-post"},[n("v-card-text",[n("link-to-portfolio"),n("section",[n("h1",[t._v("Введение.")]),n("p",[t._v("\n                        Этот проект был написан чтобы продемонстрировать пользовательскую аутентификацию и авторизацию с помощью различных методов.\n                        Эти методы были реализованы с помощью различных стратегий "),n("a",{attrs:{href:"http://www.passportjs.org/",target:"_blank"}},[t._v("Passport.js")]),t._v(".\n                        Таких как "),n("a",{attrs:{href:"http://www.passportjs.org/docs/username-password/"}},[t._v("Local")]),t._v("\n                        стратегия (использующая "),n("strong",[t._v("username и password")]),t._v(").\n                        А также другие стратегии такие как "),n("a",{attrs:{href:"http://www.passportjs.org/docs/facebook/"}},[t._v("Facebook")]),t._v(", "),n("a",{attrs:{href:"http://www.passportjs.org/docs/twitter/"}},[t._v("Twitter")]),t._v("\n                        и "),n("a",{attrs:{href:"http://www.passportjs.org/packages/"}},[t._v("многие другие.")]),t._v(".\n                        При разработке своего проекта я использовал основные идеи из приложения "),n("a",{attrs:{href:"https://github.com/sahat/hackathon-starter",target:"_blank"}},[t._v("Hackathon-starter")]),t._v(".\n                    ")]),n("p",{staticClass:"subheading"},[n("strong",[t._v("\n                            Этот проект на "),n("strong",[t._v("GitHub")]),t._v(" можно посмотреть "),n("a",{attrs:{href:"https://github.com/bsa-git/express-passport",target:"_blank"}},[t._v("здесь")])])]),n("p",{staticClass:"subheading"},[n("strong",[t._v("\n                            Демонстрацию этого проекта можно посмотреть "),n("a",{attrs:{href:"http://express-passport-exx.herokuapp.com/",target:"_blank"}},[t._v("здесь")])])])]),n("section",[n("h2",[t._v("Обзор")]),n("p",[n("em",[t._v("Простая, ненавязчивая аутентификация для Node.js — ")]),n("a",{attrs:{href:"http://passportjs.org",target:"_blank"}},[n("em",[t._v("passportjs.org")])]),t._v(".\n                        "),n("em",[t._v("PassportJS — это middleware для авторизации под node.js. Passport поддерживает авторизацию с помощью огромного количества сервисов,\n                            включая «ВКонтакте» и прочие твиттеры. Список сервисов можно просмотреть "),n("a",{attrs:{href:"http://www.passportjs.org/packages/",target:"_blank"}},[t._v("здесь.")])])]),n("h3",[t._v("Возможности")]),n("ul",[n("li",[n("strong",[t._v("Local Authentication")]),t._v(" используя Email и Password")]),n("li",[n("strong",[t._v("OAuth 1.0a Authentication")]),t._v(" через Twitter")]),n("li",[n("strong",[t._v("OAuth 2.0 Authentication")]),t._v("\n                            через Facebook, Google, GitHub, LinkedIn, Instagram\n                        ")]),n("li",[t._v("Flash сообщения")]),n("li",[t._v("MVC структура приложения")]),n("li",[t._v("Bootstrap 3 + jQuery")]),n("li",[t._v("Контактная форма (для передачи почты используется сервис "),n("a",{attrs:{href:"https://sendgrid.com/"}},[t._v("Sendgrid")]),t._v(")\n                        ")]),n("li",[t._v("Управление Аккаунтами")]),n("li",[t._v("Gravatar")]),n("li",[t._v("Профайл Детали")]),n("li",[t._v("Изменить Пароль")]),n("li",[t._v("Забыли Пароль")]),n("li",[t._v("Сбросить Пароль")]),n("li",[t._v("Подключение мульти OAuth стратегий к одному аккаунту")]),n("li",[t._v("Удалить Аккаунт")]),n("li",[t._v("CSRF защита")]),n("li",[n("strong",[t._v("API Примеры")]),t._v(": Facebook, Foursquare, Last.fm, Tumblr, Twitter, Stripe, LinkedIn и т.д.\n                        ")])])]),n("section",[n("h2",[t._v("Ресурсы")]),n("dl",[n("dt",[n("strong",[t._v("Node.js (Chrome's V8 JavaScript engine)")])]),n("dd",[n("a",{attrs:{href:"https://nodejs.org/en/docs/",target:"_blank"}},[t._v("Документация")])]),n("dt",[n("strong",[t._v("Express (Node.js framework)")])]),n("dd",[n("a",{attrs:{href:"http://expressjs.com/en/guide/routing.html",target:"_blank"}},[t._v("Документация")])]),n("dd",[n("a",{attrs:{href:"http://expressjs.com/en/4x/api.html",target:"_blank"}},[t._v("API")])]),n("dt",[n("strong",[t._v("Passport.js")])]),n("dd",[n("a",{attrs:{href:"http://www.passportjs.org/docs/",target:"_blank"}},[t._v("Документация")])]),n("dt",[n("strong",[t._v("jQuery")])]),n("dd",[n("a",{attrs:{href:"http://learn.jquery.com/",target:"_blank"}},[t._v("Документация")])]),n("dt",[n("strong",[t._v("Bootstrap 3")])]),n("dd",[n("a",{attrs:{href:"https://getbootstrap.com/docs/3.3/",target:"_blank"}},[t._v("Документация")])]),n("dt",[n("strong",[t._v("Font Awesome - the iconic font and CSS toolkit")])]),n("dd",[n("a",{attrs:{href:"https://fontawesome.com/icons?d=gallery",target:"_blank"}},[t._v("Icons")])]),n("dt",[n("strong",[t._v("MongoDB (noSQL DataBase)")])]),n("dd",[n("a",{attrs:{href:"https://docs.mongodb.com/",target:"_blank"}},[t._v("Документация")])]),n("dd",[n("a",{attrs:{href:"https://cloud.mongodb.com/user#/atlas/login",target:"_blank"}},[t._v("Atlas (облачный хостинг)")])]),n("dd",[n("a",{attrs:{href:"https://mlab.com/home",target:"_blank"}},[t._v("mLab (облачный хостинг 500MB FREE)")])]),n("dd",[n("a",{attrs:{href:"https://docs.mongodb.com/compass/current/",target:"_blank"}},[t._v("Сompass (инструмент для визуализации данных)")])]),n("dd",[n("a",{attrs:{href:"http://mongoosejs.com/docs/guide.html",target:"_blank"}},[t._v("Mongoosejs (NPM компонент для работы с моделями базы данных)")])]),n("dt",[n("strong",[t._v("Интересные статьи")])]),n("dd",[n("a",{attrs:{href:"https://code.tutsplus.com/tutorials/authenticating-nodejs-applications-with-passport--cms-21619",target:"_blank"}},[t._v("Authenticating Node.js Applications With Passport")])]),n("dd",[n("a",{attrs:{href:"https://scotch.io/tutorials/easy-node-authentication-setup-and-local",target:"_blank"}},[t._v("Easy Node Authentication")])]),n("dd",[n("a",{attrs:{href:"http://sahatyalkabov.com/how-to-implement-password-reset-in-nodejs/",target:"_blank"}},[t._v("How To Implement Password Reset In Node.js")])]),n("dd",[n("a",{attrs:{href:"https://habr.com/company/ruvds/blog/335434/",target:"_blank"}},[t._v("Аутентификация в Node.js. Учебные руководства и возможные ошибки")])])])]),n("section",[n("h2",[t._v("Установка приложения")]),n("h3",[t._v("Предварительные требования")]),n("ol",[n("li",[n("p",[t._v("\n                                Убедитесь в том, что у вас установлен "),n("a",{attrs:{href:"https://nodejs.org/"}},[t._v("NodeJS 8.0+")]),t._v("\n                                и\n                                "),n("a",{attrs:{href:"https://www.mongodb.org/downloads"}},[t._v("MongoDB")]),t._v(".\n                            ")])]),n("li",[n("p",[t._v("\n                                Клонируйте или загрузите "),n("a",{attrs:{href:"https://github.com/bsa-git/express-passport"}},[t._v("express-passport")]),t._v("\n                                проект с GitHub.\n                            ")])]),n("li",[t._v("\n                            Инсталируйте ваши зависимости\n                            "),n("pre",[n("code",{staticClass:"bash"},[t._v("cd <project-name> npm install # Or yarn install")])])])]),n("h3",[t._v("Переменные окружения")]),n("p",[t._v("\n                        Файл "),n("code",[t._v(".env")]),t._v(" должен находиться в корне проекта, если он отсутствует, то его\n                        нужно создать на основе примера файла "),n("code",[t._v(".env.example")]),t._v(", иначе приложение будет\n                        выдавать ошибку. Файл "),n("code",[t._v(".env")]),t._v(" устанавливает переменные окружения.\n                        В переменных окружения обычно указываются секретные данные пользователя например\n                        "),n("em",[n("strong",[t._v("user_id")])]),t._v(", "),n("em",[n("strong",[t._v("user_secret")])]),t._v(" и т.д.\n                    ")]),n("h3",[t._v("Запуск вашего проекта")]),n("h4",[t._v("Development")]),n("pre",[n("code",{staticClass:"bash"},[t._v("npm run dev")])]),n("p",[t._v("\n                        Приложение будет запущено в режиме "),n("strong",[t._v("Разработки")]),t._v(" и будет выполнятся на\n                        "),n("a",{attrs:{href:"http://localhost:3000"}},[t._v("http://localhost:3000")])]),n("h4",[t._v("Production")]),n("pre",[n("code",{staticClass:"bash"},[t._v("npm start")])]),n("p",[t._v("\n                        Приложение будет запущено в "),n("strong",[t._v("Рабочем")]),t._v(" режиме и будет выполнятся на\n                        рабочем хостинге пример можно посмотреть "),n("a",{attrs:{href:"http://express-passport-exx.herokuapp.com/",target:"_blank"}},[t._v("здесь")])])]),n("section",[n("h2",[t._v("Структура приложения")]),n("h3",[t._v("Файловая структура")]),n("kbd",[t._v("пр.1")]),n("express-passport-code1"),n("p",[n("em",[n("strong",[t._v("Замечание: ")]),t._v("Здесь представлен мой вариант организации структуры приложения.\n                        Вы можете изменять структуру приложения по своему усмотрению...")])]),n("h3",[t._v("Список "),n("strong",[t._v("NPM")]),t._v(" пакетов")]),n("kbd",[t._v("пр.2")]),n("express-passport-code2"),n("h3",[t._v("Конфигурация")]),n("h4",[t._v(".env")]),n("p",[t._v("\n                        Файл "),n("code",[t._v(".env")]),t._v(" должен находиться в корне проекта, если он отсутствует, то его\n                        нужно создать на основе примера файла "),n("code",[t._v(".env.example")]),t._v(", иначе приложение будет\n                        выдавать ошибку. Файл "),n("code",[t._v(".env")]),t._v(" устанавливает переменные окружения.\n                        В переменных окружения обычно указываются секретные данные пользователя например\n                        "),n("em",[n("strong",[t._v("user_id")])]),t._v(", "),n("em",[n("strong",[t._v("user_secret")])]),t._v(" и т.д.\n                    ")]),n("kbd",[t._v("пр.3 для .env.example")]),n("express-passport-code3"),n("p",[n("em",[n("strong",[t._v("Замечание: ")]),t._v("\n                        Чтобы иметь реальные ключи для доступа к API различных сервисов нужно зарегистрировать ваше приложение\n                        в этих сервисах. Примеры регистрации приложения и получения ключей API в разных сервисах\n                        можно посмотреть "),n("a",{attrs:{href:"https://github.com/sahat/hackathon-starter#obtaining-api-keys",target:"_blank"}},[t._v("здесь")]),t._v(".\n                    ")])])],1),n("section",[n("h2",[t._v("Работа приложения")]),n("ul",[n("li",[t._v("\n                            В приложении я использую базу данных MongoDB. Можно "),n("a",{attrs:{href:"https://www.mongodb.com/download-center#community",target:"_blank"}},[t._v("установить MongoDB")]),t._v("\n                            локально на компьютер\n                            или использовать MongoDB на облачном хостинге "),n("a",{attrs:{href:"https://cloud.mongodb.com/",target:"_blank"}},[t._v("Atlas")]),t._v(" или "),n("a",{attrs:{href:"https://mlab.com/home",target:"_blank"}},[t._v("mLab")]),t._v(".\n                        ")]),n("li",[t._v("\n                            Чтобы тестировать в приложении возможность логирования с помощью таких сервисов как\n                            Facebook, Google, GitHub, LinkedIn, Instagram и т.д. нужно быть там зарегистрированным и иметь свой аккаунт.\n                        ")]),n("li",[t._v("\n                            Если вы разработчик и хотите создавать приложения с возможностью логирования и доступа других пользователей\n                            к API различных сервисов, нужно зарегистрировать ваше приложение\n                            в этих сервисах. Примеры регистрации приложения и получения ключей API в разных сервисах\n                            можно посмотреть "),n("a",{attrs:{href:"https://github.com/sahat/hackathon-starter#obtaining-api-keys",target:"_blank"}},[t._v("здесь")])]),n("li",[t._v("\n                            Для передачи почтовых сообщений я пользуюсь сервисом "),n("a",{attrs:{href:"https://app.sendgrid.com",target:"_blank"}},[t._v("SendGrid")]),t._v(".\n                            Этот сервис дает возможность передавать бесплатно до 100 сообщений в день, но для этого нужно зарегистрироваться в нем\n                            и получить "),n("strong",[t._v("SENDGRID_API_KEY")]),t._v(".\n                            "),n("p",[n("em",[n("strong",[t._v("Замечание: ")]),t._v("\n                                Для безопасности этот сервис предлагает включать в свой белый список те "),n("strong",[t._v("IP")]),t._v("\n                                адреса с которых вы хотите передавать сообщения.\n                                Важно, чтобы ваш "),n("strong",[t._v("IP")]),t._v("\n                                был постоянен, иначе передача сообщений будет не возможна...\n                            ")])])]),n("li",[t._v("Для построения пользовательского интерфейса используется "),n("a",{attrs:{href:"https://getbootstrap.com/docs/3.3/",target:"_blank"}},[t._v("Bootstrap 3")]),t._v(", это один из популярных HTML, CSS,\n                            и JS фреймворков для разработки интерактивных мобильных проектов в Интернете.\n                        ")])]),n("h3",[t._v("Mongoose модель для аккаунтов пользователей")]),n("p",[t._v("\n                        Аккаунты зарегистрированных пользователей храняться в базе данных "),n("strong",[t._v("MongoDB")]),t._v("\n                        в таблице "),n("strong",[t._v("Users")]),t._v(".\n                        Структрура таблицы задается схемой "),n("strong",[t._v("userSchema")]),t._v("\n                        в модуле "),n("code",[t._v("models/User.js")]),t._v(" см. пр.4\n                    ")]),n("kbd",[t._v("пр.4")]),n("express-passport-code4"),t._v("\n                    Из структуры модели "),n("code",[t._v("models/User.js")]),t._v("\n                    видно, что каждый аккаунт пользователя должен иметь обязательное уникальное поле\n                    адреса "),n("strong",[t._v("Email")]),t._v(".\n                    "),n("p",[t._v("Создать аккаунт пользователя можно двумя способами:")]),n("ul",[n("li",[t._v("\n                            Через форму "),n("strong",[t._v("Create Account")]),t._v(" например по "),n("a",{attrs:{href:"http://express-passport-exx.herokuapp.com/signup",target:"_blank"}},[t._v("адресу")]),t._v(".\n                            В форме вы вводите адрес электронной почты и ваш пароль и если ваш "),n("strong",[t._v("email")]),t._v("\n                            будет уникальным, то\n                            в базе создается запись с вашим аккаунтом с полями "),n("strong",[t._v("email")]),t._v(" и "),n("strong",[t._v("password")])]),n("li",[t._v("\n                            Через форму "),n("strong",[t._v("Login")]),t._v(" например по "),n("a",{attrs:{href:"http://express-passport-exx.herokuapp.com/login",target:"_blank"}},[t._v("адресу")]),t._v(".\n                            В форме из списка вы выбираете сервис (Facebook, Google, LinkedIn...) и если этот сервис не\n                            присоединен к вашему уже существующему аккаунту и в этом сервисе, указанный "),n("strong",[t._v("email")]),t._v("\n                            отличается от других электронных адресов, существующих аккаунтов, тогда создается новый\n                            аккаунт с электронным адресом этого сервиса и полем с названием этого сервиса со значением его "),n("strong",[t._v("id")]),t._v("\n                            например "),n("code",[t._v('instagram: "2000082009", email: "my@instagram.com"')]),t._v(".\n                            "),n("p",[t._v("При этом также из этого сервиса регистрируемый пользователь получаем данные для\n                                своего профайла в поле "),n("strong",[t._v("profile")]),t._v(" и получает ключи доступа к\n                                своему "),n("strong",[t._v("API")]),t._v(" в поле "),n("strong",[t._v("tokens")]),t._v(".")])])]),n("p",[t._v("\n                        Также в структуре модели мы видим два поля "),n("code",[t._v("passwordResetToken: String, passwordResetExpires: Date")]),t._v(",\n                        которые используются при алгоритме восстановления пароля, когда пользователь забывает свой пароль.\n                        а параметр "),n("code",[t._v("{timestamps: true}")]),t._v("\n                        указывает модели чтобы она создавала поля даты создания и изменения аккаунта\n                        например "),n("code",[t._v("createdAt: 2018-06-19 11:18:12.867, updatedAt: 2018-06-23 08:39:29.442")]),t._v(".\n                    ")]),n("p",[t._v("\n                        В существующий аккаунт пользователя можно присоединить другие сервисы, по которым можно входить\n                        через этот аккаунт при логировании пользоватея. Для этого когда пользователь уже вошел под своим аккаунтом\n                        через форму логирования нужно через меню "),n("strong",[t._v("My Account")]),t._v("\n                        открыть форму своего профайла\n                        например по "),n("a",{attrs:{href:"http://express-passport-exx.herokuapp.com/account",target:"_blank"}},[t._v("адресу")]),t._v(".\n                        В этой форме можно изменить данные своего профайла, изменить пароль, если он существует,\n                        удалить свой аккаут или присоедить к своему аккаунту сервис, с помощью которого можно входить\n                        через этом аккаут при логировании. В нижней части формы существует список сервисов, которые можно\n                        присоединить к текущему аккаунту.\n                    ")]),n("p",[n("em",[n("strong",[t._v("Замечание: ")]),t._v("\n                        Присоединить к текущему аккаунту можно только такой сервис, который еще не был присоединен к нашим\n                        другим аккаунтам, т.е. выбранный сервис может быть присоединен к аккаунту только один раз.\n                    ")])]),n("p",[t._v("\n                        При присоединении сервиса к аккаунту появляется поле этого сервиса с его "),n("strong",[t._v("id")]),t._v(",\n                        например "),n("code",[t._v('google: "110341449488589699610"')]),t._v(", и в поле "),n("strong",[t._v("tokens")]),t._v("\n                        получаем ключи доступа к\n                        "),n("strong",[t._v("API")]),t._v(" этого сервиса, например "),n("code",[t._v('tokens:[{kind: "google", accessToken: "ya29.xxx..."}]')]),t._v("\n                        А также из этого сервиса получаем данные профайла в поле "),n("strong",[t._v("profile")]),t._v("\n                        значения которых были пустыми.\n                    ")]),n("p",[t._v("\n                        Таким образом при присоединении к аккаунту дополнительных сервисов есть возможность логироваться в этот аккаунт через разные\n                        сервисы, которые были присоединены к этому аккаунту.\n                    ")]),n("p",[t._v("\n                        Иногда возникает необходимость для некоторого сервиса просто сохранить коды доступа к его "),n("strong",[t._v("API")]),t._v("\n                        в поле "),n("strong",[t._v("tokens")]),t._v("\n                        в текущем аккаунте, при этом этот сервис не учавствует в аутентификации пользователя\n                        а используется только для доступа к своим ресурсам через свои "),n("strong",[t._v("tokens")]),t._v(". Такой подход\n                        применяется для некоторых примеров "),n("strong",[t._v("API")]),t._v("\n                        в модуле "),n("code",[t._v("controllers/api.js")]),t._v(".\n                    ")]),n("h3",[t._v("Стратегии Passport.js")]),t._v("\n\n                    Существует множество стратегий для "),n("strong",[t._v("Passport.js")]),t._v(" которые можно посмотреть\n                    "),n("a",{attrs:{href:"http://www.passportjs.org/packages/",target:"_blank"}},[t._v("здесь")]),t._v(". В нашем проекте стратегии реализованы\n                    в модуле "),n("code",[t._v("config/pasport.js")]),t._v(". Рассмотрим основные из них.\n                    "),n("h4",[t._v("Local")]),t._v("\n                    Стратегия "),n("strong",[t._v("Local")]),t._v(" использует "),n("strong",[t._v("email")]),t._v(" и "),n("strong",[t._v("password")]),t._v("\n                    при аутентификации пользователя.\n                    "),n("p",[n("kbd",[t._v("пр.5")])]),n("express-passport-code5"),t._v("\n                    Логика такая: пользователь передает свой "),n("strong",[t._v("email")]),t._v(" и "),n("strong",[t._v("password")]),t._v("\n                    стратегия ищет аккаунт по переданному "),n("strong",[t._v("email")]),t._v(", если не находит - выдает ошибку "),n("code",[t._v("Email not found.")]),t._v(".\n                    Если находит, то сравнивает полученный "),n("strong",[t._v("password")]),t._v(" с существующим, если "),n("strong",[t._v("password")]),t._v("\n                    отличается - выдает ошибку "),n("code",[t._v("Invalid email or password")]),t._v(". Если "),n("strong",[t._v("password")]),t._v(" совпадает,\n                    то выдается положительный результат и происходит аутентификация пользователя.\n\n                    "),n("h4",[t._v("GitHub")]),t._v("\n                    Стратегия "),n("strong",[t._v("GitHub")]),t._v(" и другие стратегии которые используются при аутентификации и авторизации пользователя.\n                    "),n("p",[n("kbd",[t._v("пр.6")])]),n("express-passport-code6"),t._v("\n                    Логика такая: пользователь аутентифицируется на сервисе "),n("strong",[t._v("GitHub")]),t._v("\n                    если аутентификация прошла успшно,\n                    то получает от сервиса ("),n("strong",[t._v("accessToken, refreshToken, profile")]),t._v(").\n                    "),n("p",[t._v("\n                        Если пользователь уже прошел аутентификацию на сайте, то по полю "),n("code",[t._v("github: profile.id")]),t._v("\n                        в базе данных ищется соответствующий аккаунт пользователя. Если аккаунт с таким пользователем найден, то выдается\n                        ошибка "),n("code",[t._v("There is already a GitHub account that belongs to you. Sign in with that account or delete it, then link it with your current account.")]),t._v("\n                        Это значит, что такой сервис может идентифицироваться только с одним аккаунтом. Если аккаунт не найден,\n                        то в него добавляется поле "),n("code",[t._v("github = profile.id")]),t._v(", в поле "),n("strong",[t._v("tokens")]),t._v("\n                        добавляется обьект "),n("code",[t._v("{kind: 'github', accessToken}")]),t._v(", а в поле "),n("strong",[t._v("profile")]),t._v("\n                        добавляются отсутствующие значения полей "),n("strong",[t._v("name, picture, location, website")]),t._v(".\n                    ")]),n("p",[t._v("\n                        Если пользователь не прошел аутентификацию на сайте, то по полю "),n("code",[t._v("github: profile.id")]),t._v("\n                        в базе данных ищется соответствующий аккаунт пользователя. Если аккаунт с таким пользователем найден, то\n                        выдается положительный результат и происходит аутентификация пользователя на сайте.\n                        Если аккаунт с таким пользователем  не найден, то по полю "),n("code",[t._v("email: profile._json.email")]),t._v("\n                        в базе данных ищется соответствующий аккаунт пользователя. Если аккаунт с "),n("strong",[t._v("email")]),t._v(" найден, то выдается\n                        ошибка "),n("code",[t._v("There is already an account using this email address. Sign in to that account and link it with GitHub manually from Account Settings.")]),t._v(".\n                        Это значит, что значение "),n("strong",[t._v("email")]),t._v(" должно быть уникальным для всех зарегистрированных аккаунтах.\n                        Если аккаунт с "),n("strong",[t._v("email")]),t._v(" не найден, то создается новый аккаунт с уникальным полем "),n("code",[t._v("email = profile._json.email")]),t._v("\n                        в аккаунт добавляется поле "),n("code",[t._v("github = profile.id")]),t._v(", в поле "),n("strong",[t._v("tokens")]),t._v(" аккаунта\n                        добавляется обьект "),n("code",[t._v("{kind: 'github', accessToken}")]),t._v(", а в поле "),n("strong",[t._v("profile")]),t._v(" аккаунта\n                        добавляются значения полей "),n("strong",[t._v("name, picture, location, website")]),t._v(".\n                    ")]),n("h4",[t._v("OAuth")]),t._v("\n                    Стратегия "),n("strong",[t._v("OAuth")]),t._v(" которя используются только при авторизации пользователя.\n                    "),n("p",[n("kbd",[t._v("пр.7")])]),n("express-passport-code7"),t._v("\n                    Логика такая: стратегия используется чтобы сохранить ключи доступа ("),n("strong",[t._v("accessToken, tokenSecret")]),t._v(")\n                    к "),n("strong",[t._v("API")]),t._v(" соответствующего сервиса в текущем аккаунте, в поле "),n("strong",[t._v("tokens")]),t._v(" аккаунта\n                    добавляется обьект "),n("code",[t._v("{kind: 'tumblr', accessToken: token, tokenSecret}")]),t._v(".\n                    "),n("h4",[t._v("OAuth2")]),t._v("\n                    Стратегия "),n("strong",[t._v("OAuth2")]),t._v(" которя используются только при авторизации пользователя.\n                    "),n("p",[n("kbd",[t._v("пр.8")])]),n("express-passport-code8"),t._v("\n                    Логика такая: стратегия используется чтобы сохранить ключи доступа ("),n("strong",[t._v("accessToken")]),t._v(")\n                    к "),n("strong",[t._v("API")]),t._v(" соответствующего сервиса в текущем аккаунте, в поле "),n("strong",[t._v("tokens")]),t._v(" аккаунта\n                    добавляется обьект "),n("code",[t._v("{kind: 'pinterest', accessToken}")]),t._v(".\n\n                    "),n("h3",[t._v("Gravatar ( "),n("a",{attrs:{href:"https://ru.wikipedia.org/wiki/Gravatar",target:"_blank"}},[t._v("globally recognized avatar")]),t._v("  — глобально распознаваемый аватар)")]),t._v("\n                    Это Web 2.0 сервис, позволяющий интернет-пользователям хранить свой аватар на специальном сервере.\n                    Пользователь регистрируется на центральном сервере и сохраняет там свой аватар и адрес электронной почты.\n                    Когда он оставляет комментарий на сайте или блоге, поддерживающем Gravatar, и указывает свой адрес\n                    электронной почты, на стороне сайта вычисляется MD5-хэш от почтового адреса и отправляется на сервер\n                    Gravatar, в ответ возвращается аватар пользователя. Таким образом система Gravatar позволяет\n                    использовать аватары без регистрации на сайте или блоге.\n                    "),n("p",[t._v("\n                        В приложении эта возможность реализована как метод модели "),n("strong",[t._v("User")]),t._v("\n                        в модуле "),n("code",[t._v("models/User.js")]),t._v(" см. пр.9\n                    ")]),n("kbd",[t._v("пр.9")]),n("express-passport-code9"),n("h3",[t._v("Передача Email")]),t._v("\n                    Для передачи почтовых сообщений я пользуюсь сервисом "),n("a",{attrs:{href:"https://app.sendgrid.com",target:"_blank"}},[t._v("SendGrid")]),t._v(".\n                    Этот сервис дает возможность передавать бесплатно до 100 сообщений в день, но для этого нужно зарегистрироваться в нем\n                    и получить "),n("strong",[t._v("SENDGRID_API_KEY")]),t._v(".\n                    "),n("p",[n("em",[n("strong",[t._v("Замечание: ")]),t._v("\n                        Для безопасности этот сервис предлагает включать в свой белый список те "),n("strong",[t._v("IP")]),t._v("\n                        адреса с которых вы хотите передавать сообщения.\n                        Важно, чтобы ваш "),n("strong",[t._v("IP")]),t._v("\n                        был постоянен, иначе передача сообщений будет не возможна...\n                    ")])]),n("p",[t._v("\n                        В приложении эта возможность реализована как метод контроллера "),n("strong",[t._v("postContact")]),t._v("\n                        в модуле "),n("code",[t._v("controllers/contact.js")]),t._v(" см. пр.10\n                    ")]),n("kbd",[t._v("пр.10")]),n("express-passport-code10")],1)],1)],1)],1)],1)},staticRenderFns:[]}},963:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",[n("code",{staticClass:"highlight js"},[t._v("\n/**\n * POST /contact\n * Send a contact form via SendGrid.\n */\nexports.postContact = (req, res) => {\n    let fromName;\n    let fromEmail;\n    if (!req.user) {\n        req.assert('name', 'Name cannot be blank').notEmpty();\n        req.assert('email', 'Email is not valid').isEmail();\n    }\n    req.assert('message', 'Message cannot be blank').notEmpty();\n\n    const errors = req.validationErrors();\n\n    if (errors) {\n        req.flash('errors', errors);\n        return res.redirect('/contact');\n    }\n\n    if (!req.user) {\n        fromName = req.body.name;\n        fromEmail = req.body.email;\n    } else {\n        fromName = req.user.profile.name || '';\n        fromEmail = req.user.email;\n        if(!fromEmail){\n            req.flash('errors', {msg: 'Field fromEmail cannot be blank. Enter the email address in your profile.'});\n            return res.redirect('/contact');\n        }\n    }\n\n    const mailOptions = {\n        to: myEmail,\n        from: `${fromName} <${fromEmail}>`,\n        subject: 'Contact Form | Hackathon Starter',\n        text: req.body.message\n    };\n\n    sgMail.send(mailOptions);\n    req.flash('success', {msg: 'Email has been sent successfully!'});\n    res.redirect('/contact');\n};\n    ")])])}]}}});